// Code generated by opgen version (devel). DO NOT EDIT.

package mpio

import "github.com/sirkon/mpy6a/internal/mpio/internal/options"

// BufReaderOptionsType for type BufReader
type BufReaderOptionsType struct {
	opts []func(v *BufReader)
}

// BufReaderOptions options builder constructor for BufReader
func BufReaderOptions() BufReaderOptionsType {
	res := BufReaderOptionsType{}
	res.opts = make([]func(v *BufReader), 0, 1)
	res = res.BufferSize(options.BufReaderBufferSize)
	return res
}

// BufferSize задаёт размер буфера при вычитке.
func (o BufReaderOptionsType) BufferSize(v int) BufReaderOptionsType {
	o.opts = append(o.opts, func(vv *BufReader) {
		vv.setBufferSize(v)
	})
	return o
}

// ReadPosition задаёт начальную логическую позицию чтения из источника.
// WARNING это логическая позиция, а не физическая. Физическое смещение в источнике
//         должен задавать сам пользователь библиотеки.
func (o BufReaderOptionsType) ReadPosition(v uint64) BufReaderOptionsType {
	o.opts = append(o.opts, func(vv *BufReader) {
		vv.setReadPosition(v)
	})
	return o
}

// ReadLimit задание конечной логической позиции чтения из источника.
func (o BufReaderOptionsType) ReadLimit(v uint64) BufReaderOptionsType {
	o.opts = append(o.opts, func(vv *BufReader) {
		vv.setReadLimit(v)
	})
	return o
}

func (o BufReaderOptionsType) apply(vv *BufReader) {
	for _, opt := range o.opts {
		opt(vv)
	}
}

// SimReaderOptionsType for type SimReader
type SimReaderOptionsType struct {
	opts []func(v *SimReader)
}

// SimReaderOptions options builder constructor for SimReader
func SimReaderOptions() SimReaderOptionsType {
	res := SimReaderOptionsType{}
	res.opts = make([]func(v *SimReader), 0, 1)
	res = res.BufferSize(options.SimReaderBufferSize)
	return res
}

// BufferSize задание размера буфера. Длина буфера по умолчанию – 4096 байт.
func (o SimReaderOptionsType) BufferSize(v int) SimReaderOptionsType {
	o.opts = append(o.opts, func(vv *SimReader) {
		vv.setBufferSize(v)
	})
	return o
}

// ReadPosition задание начальной позиции чтения из источника.
func (o SimReaderOptionsType) ReadPosition(v uint64) SimReaderOptionsType {
	o.opts = append(o.opts, func(vv *SimReader) {
		vv.setReadPosition(v)
	})
	return o
}

func (o SimReaderOptionsType) apply(vv *SimReader) {
	for _, opt := range o.opts {
		opt(vv)
	}
}

// SimWriterOptionsType for type SimWriter
type SimWriterOptionsType struct {
	opts []func(v *SimWriter)
}

// SimWriterOptions options builder constructor for SimWriter
func SimWriterOptions() SimWriterOptionsType {
	res := SimWriterOptionsType{}
	res.opts = make([]func(v *SimWriter), 0, 2)
	res = res.BufferSize(options.SimWriterBufferSize)
	res = res.Logger(options.SimWriterLogger)
	return res
}

// BufferSize задание длины буфера записи. Длина по умолчанию – 4096 байт.
func (o SimWriterOptionsType) BufferSize(v int) SimWriterOptionsType {
	o.opts = append(o.opts, func(vv *SimWriter) {
		vv.setBufferSize(v)
	})
	return o
}

// WritePosition задание начальной позиции записи в приёмник.
func (o SimWriterOptionsType) WritePosition(v uint64) SimWriterOptionsType {
	o.opts = append(o.opts, func(vv *SimWriter) {
		vv.setWritePosition(v)
	})
	return o
}

// Logger задание логгера ошибок.
func (o SimWriterOptionsType) Logger(v func(err error)) SimWriterOptionsType {
	o.opts = append(o.opts, func(vv *SimWriter) {
		vv.setLogger(v)
	})
	return o
}

func (o SimWriterOptionsType) apply(vv *SimWriter) {
	for _, opt := range o.opts {
		opt(vv)
	}
}
