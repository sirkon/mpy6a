// Code generated by fenneg version (devel). DO NOT EDIT.

package types

import (
	"encoding/binary"

	"github.com/sirkon/errors"
)

// SessionEncode encodes content of Session.
func SessionEncode(dst []byte, s *Session) []byte {
	// Encode ID(Index).
	dst = IndexEncodeAppend(dst, s.ID)

	// Encode ChangeID(Index).
	dst = IndexEncodeAppend(dst, s.ChangeID)

	// Encode Repeats(uint32).
	dst = binary.AppendUvarint(dst, uint64(s.Repeats))

	// Encode Theme(uint32).
	dst = binary.AppendUvarint(dst, uint64(s.Theme))

	// Encode Data(SessionData).
	dst = s.Data.Encode(dst)

	return dst
}

// SessionEncode decodes content of Session.
func SessionDecode(s *Session, src []byte) error {
	// Decode ID(Index).
	if len(src) < 16 {
		return errors.New("decode s.ID(Index): record buffer is too small").Uint64("length-required", uint64(16)).Int("length-actual", len(src))
	}
	IndexDecode(&s.ID, src)
	src = src[16:]

	// Decode ChangeID(Index).
	if len(src) < 16 {
		return errors.New("decode s.ChangeID(Index): record buffer is too small").Uint64("length-required", uint64(16)).Int("length-actual", len(src))
	}
	IndexDecode(&s.ChangeID, src)
	src = src[16:]

	// Decode Repeats(uint32).
	{
		val, off := binary.Uvarint(src)
		if off <= 0 {
			if off == 0 {
				return errors.New("decode s.Repeats(uint32): record buffer is too small")
			}
			return errors.New("decode s.Repeats(uint32): malformed uvarint sequence")
		}
		s.Repeats = uint32(val)
		src = src[off:]
	}

	// Decode Theme(uint32).
	{
		val, off := binary.Uvarint(src)
		if off <= 0 {
			if off == 0 {
				return errors.New("decode s.Theme(uint32): record buffer is too small")
			}
			return errors.New("decode s.Theme(uint32): malformed uvarint sequence")
		}
		s.Theme = uint32(val)
		src = src[off:]
	}

	// Decode Data(SessionData).
	if recRest, err := s.Data.Decode(src); err != nil {
		return errors.Wrap(err, "decode s.Data(SessionData)")
	} else {
		src = recRest
	}

	if len(src) > 0 {
		return errors.New("the record was not emptied after the last argument decoded").Int("record-bytes-left", len(src))
	}

	return nil
}
